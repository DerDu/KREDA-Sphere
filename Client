<?php
namespace KREDA\Client;

use KREDA\Sphere\Application\Assistance\Client as AssistanceApplication;
use KREDA\Sphere\Application\Gatekeeper\Client as GatekeeperApplication;
use KREDA\Sphere\Application\Grade\Client as GradeApplication;
use KREDA\Sphere\Application\Management\Client as ManagementApplication;
use KREDA\Sphere\Application\Statistic\Client as StatisticApplication;
use KREDA\Sphere\Client\Component\Element\Element;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelApplication;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelClient;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelModule;
use KREDA\Sphere\Client\Component\Element\Repository\Shell\Container;
use KREDA\Sphere\Client\Component\Element\Repository\Shell\Error;
use KREDA\Sphere\Client\Component\Element\Repository\Shell\Screen;
use KREDA\Sphere\Client\Configuration;
use MOC\V\Component\Router\Component\Bridge\Repository\UniversalRouter;
use MOC\V\Core\AutoLoader\AutoLoader;
use MOC\V\Core\HttpKernel\HttpKernel;

header( 'Content-type: text/html; charset=utf-8' );
ini_set( 'display_errors', 1 );

require_once( __DIR__.'/Library/MOC-V/Core/AutoLoader/AutoLoader.php' );
AutoLoader::getNamespaceAutoLoader( 'MOC\V', __DIR__.'/Library/MOC-V' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere\Client', __DIR__.'/Sphere/Client' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere\Application', __DIR__.'/Sphere/Application' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere', __DIR__.'/Sphere' );

session_start();
ini_set( 'xdebug.var_display_max_data', -1 );
ini_set( 'xdebug.var_display_max_children', -1 );
ini_set( 'xdebug.var_display_max_depth', -1 );

function exception_error_handler( $errno, $errstr, $errfile, $errline )
{

    throw new \ErrorException( $errstr, 0, $errno, $errfile, $errline );
}

set_error_handler( '\KREDA\Client\exception_error_handler' );

$ShellScreen = new Screen();
$Config = new Configuration( new UniversalRouter(), new LevelClient() );

try {
    /**
     * Setup Public
     */
    $Config = GatekeeperApplication::setupApi( $Config );
    $Config = AssistanceApplication::setupApi( $Config );

    if (GatekeeperApplication::apiIsValidUser()) {
        /**
         * Setup Service
         */
        /**
         * Setup Application
         */
        $Config = ManagementApplication::setupApi( $Config );
        $Config = GradeApplication::setupApi( $Config );

        $Config = StatisticApplication::setupApi( $Config );

    } else {
//    $Gatekeeper = new Client();
//    $ShellScreen->addToContent( new Container( $Gatekeeper->apiSignIn() ) );
    }

    /**
     * Execute Action, Get Response
     */
    if (in_array( HttpKernel::getRequest()->getPathInfo(), $Config->getRouter()->getRouteList() )) {
        /** @var Element $Route */
        $Route = $Config->getRouter()->getRoute();
        $ShellScreen->addToContent( new Container( $Route ) );
    } else {
        $ShellScreen->addToContent( new Container( new Error( 404,
            '<p class="h6">Die angeforderte Ressource konnte nicht gefunden werden</p><samp class="text-danger">'.HttpKernel::getRequest()->getPathInfo().'</samp>' ) ) );
    }
} catch( \ErrorException $E ) {
    $ShellScreen->addError( $E );
} catch( \Exception $E ) {
    $ShellScreen->addException( $E );
}
/**
 * Define Navigation Client
 */
$ShellScreen->addToNavigation( new Container( $Config->getNavigation() ) );
/**
 * Define Navigation Module
 */
if ($Config->hasModuleNavigation()) {
    $ShellScreen->addToNavigation( new Container( $Config->getModuleNavigation() ) );
}
/**
 * Define Navigation Application
 */
if ($Config->hasMenuNavigation()) {
    $ShellScreen->addToNavigation( new Container( $Config->getMenuNavigation() ) );
}
/**
 * Create Client
 */
print $ShellScreen->getContent();
