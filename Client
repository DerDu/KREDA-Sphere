<?php
namespace KREDA\Client;

use Doctrine\DBAL\Exception\DatabaseObjectNotFoundException;
use KREDA\Sphere\Application\Assistance\Client as AssistanceApplication;
use KREDA\Sphere\Application\Assistance\Client\Aid\Cause\Danger;
use KREDA\Sphere\Application\Assistance\Client\Aid\Cause\Info;
use KREDA\Sphere\Application\Assistance\Client\Aid\Cause\Warning;
use KREDA\Sphere\Application\Gatekeeper\Client as GatekeeperApplication;
use KREDA\Sphere\Application\Graduation\Client as GraduationApplication;
use KREDA\Sphere\Application\Management\Client as ManagementApplication;
use KREDA\Sphere\Application\Statistic\Client as StatisticApplication;
use KREDA\Sphere\Application\System\Client as SystemApplication;
use KREDA\Sphere\Application\System\Service\Database;
use KREDA\Sphere\Application\System\Service\Update;
use KREDA\Sphere\Client\Component\Element\Element;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelApplication;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelClient;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelModule;
use KREDA\Sphere\Client\Component\Element\Repository\Shell\Container;
use KREDA\Sphere\Client\Component\Element\Repository\Shell\Landing;
use KREDA\Sphere\Client\Component\Element\Repository\Shell\Screen;
use KREDA\Sphere\Client\Component\Parameter\Repository\Link\NameParameter;
use KREDA\Sphere\Client\Component\Parameter\Repository\Link\UrlParameter;
use KREDA\Sphere\Client\Configuration;
use MOC\V\Component\Database\Exception\DatabaseException;
use MOC\V\Component\Router\Component\Bridge\Repository\UniversalRouter;
use MOC\V\Core\AutoLoader\AutoLoader;
use MOC\V\Core\HttpKernel\HttpKernel;

require_once( __DIR__.'/Library/MOC-V/Core/AutoLoader/AutoLoader.php' );
AutoLoader::getNamespaceAutoLoader( 'MOC\V', __DIR__.'/Library/MOC-V' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere\Client', __DIR__.'/Sphere/Client' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere\Application', __DIR__.'/Sphere/Application' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere', __DIR__.'/Sphere' );

header( 'Content-type: text/html; charset=utf-8' );
error_reporting( E_ALL );
ini_set( 'display_errors', 1 );

session_start();

ini_set( 'xdebug.var_display_max_data', -1 );
ini_set( 'xdebug.var_display_max_children', -1 );
ini_set( 'xdebug.var_display_max_depth', -1 );

set_error_handler( create_function( '$N,$S,$F,$L', 'throw new \ErrorException($S,0,$N,$F,$L);' ), E_ALL );

$ShellScreen = new Screen();
$Config = new Configuration( new UniversalRouter(), new LevelClient() );
if (false !== strpos( HttpKernel::getRequest()->getPathInfo(), '/Sphere/Assistance/Support' )) {
    /**
     * Setup Public-Access
     */
    $Config = AssistanceApplication::setupApi( $Config );
    $Config->getClientNavigation()->addLinkToMeta(
        new LevelClient\Link( new UrlParameter( '/Sphere' ), new NameParameter( 'Zurück zur Anwendung' ) )
    );
    if (in_array( HttpKernel::getRequest()->getPathInfo(), $Config->getClientRouter()->getRouteList() )) {
        /** @var Element $Route */
        $Route = $Config->getClientRouter()->getRoute();
        $ShellScreen->addToContent( new Container( $Route ) );
    } else {
        /**
         * Show Help
         */
        try {
            /** @var Element $Route */
            $Route = $Config->getClientRouter()->getRoute( '/Sphere/Assistance/Support/Application/Missing' );
            $ShellScreen->addToContent( new Container( $Route ) );
        } catch( \Exception $E ) {
            /**
             * Unexpected Exception
             */
            $ShellScreen->addException( $E, get_class( $E ) );
        }
    }
} else {
    /**
     * Setup Application
     */
    try {
        /**
         * Setup Private-Access
         */
        if (GatekeeperApplication::apiIsValidUser()) {
            $Config = SystemApplication::setupApi( $Config );
            $Config = ManagementApplication::setupApi( $Config );
            $Config = GraduationApplication::setupApi( $Config );
            $Config = StatisticApplication::setupApi( $Config );
        }
        /**
         * Setup Public-Access
         */
        $Config = GatekeeperApplication::setupApi( $Config );
        $Config = AssistanceApplication::setupApi( $Config );
        /**
         * Execute Action (if available)
         */
        if (in_array( HttpKernel::getRequest()->getPathInfo(), $Config->getClientRouter()->getRouteList() )) {
            /** @var Element $Route */
            $Route = $Config->getClientRouter()->getRoute();
            $ShellScreen->addToContent( new Container( $Route ) );
        } else {
            /**
             * Show Help (if not available)
             */
            if (GatekeeperApplication::apiIsValidUser()) {
                /**
                 * Show Help
                 */
                try {
                    /** @var Element $Route */
                    $Route = $Config->getClientRouter()->getRoute( '/Sphere/Assistance/Support/Application/Missing' );
                    $ShellScreen->addToContent( new Container( $Route ) );
                } catch( \Exception $E ) {
                    /**
                     * Unexpected Exception
                     */
                    $ShellScreen->addException( $E, get_class( $E ) );
                }
            } else {
                /** @var Element $Route */
                $Route = $Config->getClientRouter()->getRoute( '/Sphere/Gatekeeper/SignIn' );
                $ShellScreen->addToContent( new Container( $Route ) );
            }
        }
    } catch( \ErrorException $E ) {
        /**
         * Php Error
         */
        $ShellScreen->addError( $E );
    } catch( DatabaseException $E ) {
        try {
            /**
             * Setup Public-Access
             */
            $Config = AssistanceApplication::setupApi( $Config );
            /** @var Element $Route */
            $Route = $Config->getClientRouter()->getRoute( '/Sphere/Assistance/Support/Application/Start' );
            $ShellScreen->addToContent( new Container( $Route ) );
        } catch( \Exception $E ) {
            /**
             * Unexpected Exception
             */
            $ShellScreen->addException( $E, get_class( $E ) );
        }
    } catch( DatabaseObjectNotFoundException $E ) {
        /**
         * Repair Database
         */
        $View = new Landing();
        $View->setTitle( 'Systemprüfung' );
        $View->setDescription( 'Datenbanken' );
        $View->setMessage(
            new Danger( 'Die Anwendung hat festgestellt, dass manche Datenbanken nicht korrekt arbeiten.' )
            .new Warning( 'Sollte das Problem nach dem automatischen Reparaturversuch nicht behoben sein wenden Sie sich bitte an den Support' )
            .new Info( $E->getMessage() )
        );
        $View->setContent(
            Update::getApi()->setupDataStructure( false )
            .new GatekeeperApplication\Redirect\Custom( '', '/Sphere', '', '', 30 )
        );
        $ShellScreen->addToContent( new Container( $View ) );
    } catch( \Exception $E ) {
        if (false !== strpos( $E->getFile(), 'Sphere\Application\Service' )) {
            /**
             * Show Help
             */
            try {
                /**
                 * Setup Public-Access
                 */
                $Config = AssistanceApplication::setupApi( $Config );
                $Config->getClientNavigation()->addLinkToMeta(
                    new LevelClient\Link( new UrlParameter( '/Sphere' ), new NameParameter( 'Zurück zur Anwendung' ) )
                );
                /** @var Element $Route */
                $Route = $Config->getClientRouter()->getRoute( '/Sphere/Assistance/Support/Application/Start' );
                $ShellScreen->addToContent( new Container( $Route ) );
            } catch( \Exception $E ) {
                /**
                 * Unexpected Exception
                 */
                $ShellScreen->addException( $E, get_class( $E ) );
            }
        } else {
            /**
             * Unexpected Exception
             */
            $ShellScreen->addException( $E, get_class( $E ) );
        }
    }
}

/**
 * Define Navigation Client
 */
$ShellScreen->addToNavigation(
    new Container( $Config->getClientNavigation() )
);
/**
 * Define Navigation Module
 */
if ($Config->hasModuleNavigation()) {
    $ShellScreen->addToNavigation(
        new Container( $Config->getModuleNavigation() )
    );
}
/**
 * Define Navigation Application
 */
if ($Config->hasApplicationNavigation()) {
    $ShellScreen->addToNavigation(
        new Container( $Config->getApplicationNavigation() )
    );
}
/**
 * Create Client
 */
print $ShellScreen->getContent();
