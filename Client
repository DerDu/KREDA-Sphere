<?php
namespace KREDA\Client;

use KREDA\Sphere\Application\Assistance\Api as AssistanceApplication;
use KREDA\Sphere\Application\Gatekeeper\Api as GatekeeperApplication;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelApplication;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelClient;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelModule;
use KREDA\Sphere\Client\Component\Element\Repository\Shell\Container;
use KREDA\Sphere\Client\Component\Element\Repository\Shell\Error;
use KREDA\Sphere\Client\Component\Element\Repository\Shell\Screen;
use KREDA\Sphere\Client\Configuration;
use MOC\V\Component\Router\Component\Bridge\Repository\UniversalRouter;
use MOC\V\Core\AutoLoader\AutoLoader;
use MOC\V\Core\HttpKernel\HttpKernel;

ini_set( 'display_errors', 1 );

require_once( __DIR__.'/Library/MOC-V/Core/AutoLoader/AutoLoader.php' );
AutoLoader::getNamespaceAutoLoader( 'MOC\V', __DIR__.'/Library/MOC-V' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere\Client', __DIR__.'/Sphere/Client' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere\Application', __DIR__.'/Sphere/Application' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere', __DIR__.'/Sphere' );

HttpKernel::getRequest()->getPathInfo();

$ShellScreen = new Screen();
$Config = new Configuration( new UniversalRouter(), new LevelClient() );
$Config = GatekeeperApplication::setupApi( $Config );
$Config = AssistanceApplication::setupApi( $Config );

/**
 * Execute Action, Get Response
 */
if (in_array( HttpKernel::getRequest()->getPathInfo(), $Config->getRouter()->getRouteList() )) {
    $ShellScreen->addToContent( new Container( $Config->getRouter()->getRoute() ) );
} else {
    $ShellScreen->addToContent( new Container( new Error( 404 ) ) );
}
/**
 * Define Navigation Client
 */
$ShellScreen->addToNavigation( new Container( $Config->getNavigation() ) );
/**
 * Define Navigation Module
 */
if ($Config->hasModuleNavigation()) {
    $ShellScreen->addToNavigation( new Container( $Config->getModuleNavigation() ) );
}
/**
 * Define Navigation Application
 */
if ($Config->hasMenuNavigation()) {
    $ShellScreen->addToNavigation( new Container( $Config->getMenuNavigation() ) );
}
/**
 * Create Client
 */
print $ShellScreen->getContent();
