<?php
namespace KREDA\Client;

use Doctrine\DBAL\DBALException;
use KREDA\Sphere\Application\Assistance\Assistance;
use KREDA\Sphere\Application\Demo\Demo;
use KREDA\Sphere\Application\Gatekeeper\Gatekeeper;
use KREDA\Sphere\Application\Management\Management;
use KREDA\Sphere\Application\System\Frontend\Database;
use KREDA\Sphere\Application\System\System;
use KREDA\Sphere\Client\Component\Element\Element;
use KREDA\Sphere\Client\Component\Element\Repository\Content\Container;
use KREDA\Sphere\Client\Component\Element\Repository\Content\Screen;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelApplication;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelClient;
use KREDA\Sphere\Client\Component\Element\Repository\Navigation\LevelModule;
use KREDA\Sphere\Client\Component\Parameter\Repository\Link\NameParameter;
use KREDA\Sphere\Client\Component\Parameter\Repository\Link\UrlParameter;
use KREDA\Sphere\Client\Configuration;
use KREDA\Sphere\Common\Extension\Debugger;
use MOC\V\Component\Database\Exception\DatabaseException;
use MOC\V\Component\Router\Component\Bridge\Repository\UniversalRouter;
use MOC\V\Core\AutoLoader\AutoLoader;
use MOC\V\Core\HttpKernel\HttpKernel;

/**
 * Setup: Php
 */
header( 'Content-type: text/html; charset=utf-8' );
error_reporting( E_ALL );
session_start();

/**
 * Setup: Loader
 */
require_once( __DIR__.'/Library/MOC-V/Core/AutoLoader/AutoLoader.php' );
AutoLoader::getNamespaceAutoLoader( 'MOC\V', __DIR__.'/Library/MOC-V' );
AutoLoader::getNamespaceAutoLoader( 'KREDA\Sphere', __DIR__.'/', 'KREDA' );
AutoLoader::getNamespaceAutoLoader( 'Markdownify', __DIR__.'/Library/Markdownify/2.1.6/src' );

/**
 * Development: Clear Cache
 */
//Cache::stageStatus( true );

/**
 * Setup: Debugger
 */
new Debugger();

/**
 * Run KREDA
 */
$ShellScreen = new Screen();
$Config = new Configuration( new UniversalRouter(), new LevelClient() );

/**
 * Setup: Error-Handler
 */
set_error_handler(
    function ( $N, $S, $F, $L ) {

        throw new \ErrorException( $S, 0, $N, $F, $L );
    }, E_ALL
);
register_shutdown_function(
    function ( Screen $S, Configuration $C ) {

        $Error = error_get_last();

        if (!$Error) {
            return;
        }

        $S->addToNavigation(
            new Container( $C->getClientNavigation() )
        );
        if ($C->hasModuleNavigation()) {
            $S->addToNavigation(
                new Container( $C->getModuleNavigation() )
            );
        }
        if ($C->hasApplicationNavigation()) {
            $S->addToNavigation(
                new Container( $C->getApplicationNavigation() )
            );
        }
        /** @var Element $R */
        $R = $C->getClientRouter()->getRoute( '/Sphere/Assistance/Support/Application/Fatal' );
        $S->addToContent( new Container( $R ) );
        print $S->getContent();
    }, $ShellScreen, $Config
);

/**
 * Main: Run
 */
try {

    /**
     * Run:
     */
    if (false !== strpos( HttpKernel::getRequest()->getPathInfo(), '/Sphere/Assistance' )) {
        /**
         * Application: Register
         */
        Assistance::registerApplication( $Config );
        $Config->getClientNavigation()->addLinkToMeta(
            new LevelClient\Link( new UrlParameter( '/Sphere' ), new NameParameter( 'ZurÃ¼ck zur Anwendung' ) )
        );
        /**
         * Application: Execution
         */
        try {
            /** @var Element $Route */
            $Route = $Config->getClientRouter()->getRoute();
            $ShellScreen->addToContent( new Container( $Route ) );
        } catch( \ErrorException $E ) {
            if (false !== strpos( $E->getMessage(), HttpKernel::getRequest()->getPathInfo() )) {
                /** @var Element $Route */
                $Route = $Config->getClientRouter()->getRoute( '/Sphere/Assistance/Support/Application/Missing' );
                $ShellScreen->extensionDebugger()->addProtocol( $E->getMessage(), 'warning-sign' );
                $ShellScreen->addToContent( new Container( $Route ) );
            } else {
                throw new \ErrorException(
                    $E->getMessage(), $E->getCode(), $E->getSeverity(), $E->getFile(), $E->getLine(), $E
                );
            }
        }
    } else {
        /**
         * Application: Register
         */
        if (Gatekeeper::serviceAccount()->checkIsValidSession()) {
            /**
             * Authenticated YES
             */
            if (Gatekeeper::serviceAccess()->checkIsValidAccess( 'Application:System' )) {
                System::registerApplication( $Config );
            }
            if (Gatekeeper::serviceAccess()->checkIsValidAccess( 'Application:Management' )) {
                Management::registerApplication( $Config );
            }
            Demo::registerApplication( $Config );
        } else {
            /**
             * Authenticated NO
             */
        }
        /**
         * Authenticated EQUAL
         */
        Gatekeeper::registerApplication( $Config );
        Assistance::registerApplication( $Config );
        /**
         * Application: Execution
         */
        try {
            if (Gatekeeper::serviceAccess()->checkIsValidAccess( HttpKernel::getRequest()->getPathInfo() )) {
                /**
                 * Execution: Allowed
                 */
                /** @var Element $Route */
                $Route = $Config->getClientRouter()->getRoute();
            } else {
                /**
                 * Execution: Forbidden
                 */
                if (Gatekeeper::serviceAccount()->checkIsValidSession()) {
                    /** @var Element $Route */
                    $Route = $Config->getClientRouter()->getRoute( '/Sphere/Assistance/Support/Application/Missing' );
                } else {
                    /** @var Element $Route */
                    $Route = $Config->getClientRouter()->getRoute( '/Sphere/Gatekeeper/SignIn' );
                }
            }
            $ShellScreen->addToContent( new Container( $Route ) );
        } catch( \ErrorException $E ) {
            if (false !== strpos( $E->getMessage(), HttpKernel::getRequest()->getPathInfo() )) {
                /**
                 * Execution: Forbidden
                 */
                if (Gatekeeper::serviceAccount()->checkIsValidSession()) {
                    /** @var Element $Route */
                    $Route = $Config->getClientRouter()->getRoute( '/Sphere/Assistance/Support/Application/Missing' );
                } else {
                    /** @var Element $Route */
                    $Route = $Config->getClientRouter()->getRoute( '/Sphere/Gatekeeper/SignIn' );
                }
                $ShellScreen->extensionDebugger()->addProtocol( $E->getMessage(), 'warning-sign' );
                $ShellScreen->addToContent( new Container( $Route ) );
            } else {
                throw new \ErrorException(
                    $E->getMessage(), $E->getCode(), $E->getSeverity(), $E->getFile(), $E->getLine(), $E
                );
            }
        }
    }

} catch( DBALException $E ) {
    /**
     * Repair Database
     */
    $ShellScreen->extensionDebugger()->addProtocol( $E->getMessage(), 'warning-sign' );
    $ShellScreen->addToContent( new Container( Database::stageRepair( $E ) ) );
} catch( DatabaseException $E ) {
    /**
     * Error
     */
    $Route = $Config->getClientRouter()->getRoute( '/Sphere/Assistance/Support/Application/Start' );
    $ShellScreen->extensionDebugger()->addProtocol( $E->getMessage(), 'warning-sign' );
    $ShellScreen->addToContent( new Container( $Route ) );
} catch( \ErrorException $E ) {
    /**
     * Error Exception
     */
    $ShellScreen->extensionDebugger()->addProtocol( $E->getMessage(), 'warning-sign' );
    $ShellScreen->addError( $E );
} catch( \Exception $E ) {
    /**
     * Unexpected Exception
     */
    $ShellScreen->extensionDebugger()->addProtocol( $E->getMessage(), 'warning-sign' );
    $ShellScreen->addException( $E, get_class( $E ) );
}

/**
 * Define Navigation Client
 */
$ShellScreen->addToNavigation(
    new Container( $Config->getClientNavigation() )
);
/**
 * Define Navigation Module
 */
if ($Config->hasModuleNavigation()) {
    $ShellScreen->addToNavigation(
        new Container( $Config->getModuleNavigation() )
    );
}
/**
 * Define Navigation Application
 */
if ($Config->hasApplicationNavigation()) {
    $ShellScreen->addToNavigation(
        new Container( $Config->getApplicationNavigation() )
    );
}
/**
 * Create Client
 */
echo $ShellScreen->getContent();
